const data = [
    { h: "GIT", q: "#1 What is Git? What are the advantages of using Git?", a: "#1 One of the biggest advantages of Git is its branching capabilities. Unlike centralized version control systems, Git branches are cheap and easy to merge. This facilitates the feature branch workflow popular with many Git users. Feature branches provide an isolated environment for every change to your codebase." },
    { h: "GIT", q: "#2 What do you understand by the term ‘Version Control System’?", a: "#2 Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time." },
    { h: "GIT", q: "#3 What’s the difference between Git and GitHub?", a: "#3 what's the difference? Simply put, Git is a version control system that lets you manage and keep track of your source code history. GitHub is a cloud-based hosting service that lets you manage Git repositories. If you have open-source projects that use Git, then GitHub is designed to help you better manage them." },
    { h: "GIT", q: "#4 Name a few Git commands with their function.", a: "#4 1 git add. Usage: git add [file] ...  2 git commit. Usage: git commit -m “[ Type in the commit message]” ... 3 git diff. Usage: git diff. ... 4 git reset. Usage: git reset [file] ... 5 git log. Usage: git log. ... 6 git branch. Usage: git branch. ... 8 git push. Usage: git push [variable name] master." },
    { h: "GIT", q: "#5 Difference between git fetch and git pull.", a: "#5 git fetch is the command that tells your local git to retrieve the latest meta-data info from the original (yet doesn't do any file transferring. It's more like just checking to see if there are any changes available). git pull on the other hand does that AND brings (copy) those changes from the remote repository." },


    { h: "HTML & CSS", q: "#1 What do you understand about the universal sector?", a: "#1 The universal selector provided by CSS helps in choosing any elements within the HTML page. It goes with a single element and uses the asterisk (i.e., '*') symbol used for denoting the selector as a universal selector. It is usually written as an asterisk followed by a selector." },
    { h: "HTML & CSS", q: "#2 Differentiate between the useS of ID selector and Class selector.", a: "#2 Difference between id and class attribute: The only difference between them is that “id” is unique in a page and can only apply to at most one element, while “class” selector can apply to multiple elements." },
    { h: "HTML & CSS", q: "#3 CSS to control image repetition?", a: "#3 To control the repetition of an image in the background, use the background-repeat property. You can use no-repeat value for the background-repeat property if you do not want to repeat an image, in this case, the image will display only once." },
    { h: "HTML & CSS", q: "#4 Are the HTML tags and elements the same thing?", a: "#4 HTML tags are used to hold the HTML element. HTML element holds the content. HTML attributes are used to describe the characteristic of an HTML element in detail. Whatever written within a HTML tag are HTML elements." },


    { h: "HTML5", q: "#1 Difference between HTML4 VS HTML5", a: "#1 Let's explore the key differences between the two versions of the Hypertext Markup Language – HTML4 vs HTML5." },
    { h: "HTML5", q: "#2 What is a Semantic Tag?", a: "#2 The HTML semantics refers to the tags that provide meaning to an HTML page rather than just presentation. It makes HTML more comprehensible by better defining the different sections and layout of web pages." },


    { h: "Javascript", q: "#1 What is the Event Bubble?", a: "#1 1 The bubbles read-only property of the Event interface indicates whether the event bubbles up through the DOM tree or not. 2A boolean value, which is true if the event bubbles up through the DOM tree." },
    { h: "Javascript", q: "#2 Difference between Function Declaration & Function Expression.", a: "#2 The main difference between a function expression and a function declaration is the function name, which can be omitted in function expressions to create anonymous functions. A function expression can be used as an IIFE (Immediately Invoked Function Expression) which runs as soon as it is defined." },


    { h: "DOM", q: "#1 What is DOM?", a: "#1 1. forming nouns denoting a state or condition.'freedom'  2. forming nouns denoting rank or status.'earldom'" },
    { h: "DOM", q: "#2 What are the different ways to get an element from DOM?", a: "#2 From the DOM, users can access HTML elements in five different ways in JavaScript. 1 Get HTML element by Id. 2 Get HTML element by className. 3 Get HTML element by Name. 4 Get HTML element by tagName. 5 Get HTML element by CSS Selector." },
    { h: "DOM", q: "#3 What’s the difference between an Event Handler and an Event Listener?", a: "#3 Note: Event handlers are sometimes called event listeners — they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that is run in response to it happening." },
    { h: "DOM", q: "#4 What does “event bubbling” mean in JavaScript?", a: "#4 Event bubbling is a method of event propagation in the HTML DOM API when an event is in an element inside another element, and both elements have registered a handle to that event. It is a process that starts with the element that triggered the event and then bubbles up to the containing elements in the hierarchy." },
    { h: "DOM", q: "#5 Can you explain the different types of events available in JavaScript?", a: "#5 JavaScript Event Types – 8 Essential Types 1.User Interface 2.Focus and blur 3.Mouse 4.Keyboard 5.Form 6.Mutotion events and observers 7.HTML5 events 8.CSS events" },
    { h: "DOM", q: "#6 What’s the difference between event.preventDefault() and event.stopPropagation()?", a: "#6 preventDefault() prevents the browsers default behaviour, but does not stop the event from bubbling up the DOM. The event. stopPropagation() prevents the event from bubbling up the DOM, but does not stop the browsers default behaviour." },


    { h: "ES6", q: "#1 What is ES6?", a: "#1 ES6 stands for ECMAScript 6. ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015." },
    { h: "ES6", q: "#2 Explain the difference between var, let and const.", a: "#2 var keyword in JavaScript: The var is the oldest keyword to declare a variable in JavaScript. Scope: Global scoped or function scoped." },
    { h: "ES6", q: "#3 What is the arrow function and how to create it?", a: "#3 Arrow function is one of the features introduced in the ES6 version of JavaScript. It allows you to create functions in a cleaner way compared to regular functions. For example, This function // function expression let x = function(x, y) { return x * y; } can be written as." },
    { h: "ES6", q: "#4 Give an example of an Arrow Function in ES6.", a: "#4 For example var show = (a, b=200) => { console. log(a + ' ' + b); } show(100); In the above function, the value of b is set to 200 by default. The function will always consider 200 as the value of b if no value of b is explicitly passed." },
    { h: "ES6", q: "#5 Discuss spread operator in ES6 with an example.", a: "#5 1 In this article, we will try to understand the basic details which are associated with the Spread operator which includes the syntax of the spread operator and its usage with the help of certain examples in ES6. 2 Let us first understand what is exactly Spread Operator is and what is its syntax and then further we will see some examples associated with its declaration." },
    { h: "ES6", q: "#6 What do you understand about default parameters?", a: "#6 The default parameter is a way to set default values for function parameters a value is no passed in (ie. it is undefined ). In a function, Ii a parameter is not provided, then its value becomes undefined . In this case, the default value that we specify is applied by the compiler." },
    { h: "ES6", q: "#7 What are template literals in ES6?", a: "#7 Template literals are a new feature introduced in ECMAScript 2015/ ES6. It provides an easy way to create multiline strings and perform string interpolation. Template literals are the string literals and allow embedded expressions. Before ES6, template literals were called as template strings." },
    { h: "ES6", q: "#8 Tell us the difference between Arrow Function and Regular Function.", a: "#8 Regular functions created using function declarations or expressions are constructible and callable. Since regular functions are constructible, they can be called using the new keyword. However, the arrow functions are only callable and not constructible, i.e arrow functions can never be used as constructor functions." },
    { h: "ES6", q: "#9 What is Prototypical Inheritance in JS?", a: "#9 In JavaScript, an object can inherit properties of another object. The object from where the properties are inherited is called the prototype. In short, objects can inherit properties from other objects — the prototypes." },

    { h: "ES6 Module - 30+31", q: "#1 What’s the difference between map, foreach, filter?", a: "#1 The forEach() method does not create a new array based on the given array. The map() method creates an entirely new array. The forEach() method returns “undefined“. The map() method returns the newly created array according to the provided callback function." },
    { h: "ES6 Module - 30+31", q: "#2 What’s the difference between filter and find?", a: "#2 The find() method is used to find all the descendant elements of the selected element. It finds the element in the DOM tree by traversing through the root to leaf. The filter() method is used to filters all the elements and returns the element that matches and the element that do not match are removed" },
    { h: "ES6 Module - 30+31", q: "#3 What is the difference between for..of and for..in?", a: "#3 Difference for..in and for..of : Both for..in and for..of are looping constructs which are used to iterate over data structures. The only difference between them is the entities they iterate over: for..in iterates over all enumerable property keys of an object. for..of iterates over the values of an iterable object." },
    { h: "ES6 Module - 30+31", q: "#4 How do you empty an array?", a: "#4 1 Substituting with a new array − arr = []; This is the fastest way. ... 2 Setting length prop to 0 − arr.length = 0. This will clear the existing array by setting its length to 0. ... 3 Splice the whole array. arr.splice(0, arr.length) This will remove all elements from the array and will actually clean the original array." },
    { h: "ES6 Module - 30+31", q: "#5 Difference between class and object.", a: "#5 Object is an instance of a class. Class is a blueprint or template from which objects are created. Object is a real world entity such as pen, laptop, mobile, bed, keyboard, mouse, chair etc. Class is a group of similar objects." },
    { h: "ES6 Module - 30+31", q: "#6 What is a Prototype chain? Or how does inheritance work in JavaScript?", a: "#6 When it comes to inheritance, JavaScript only has one construct: objects. Each object has a private property which holds a link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype." },
    { h: "ES6 Module - 30+31", q: "#7 What does destructing do in es6?", a: "#7 The destructuring assignment is a cool feature that came along with ES6. Destructuring is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. That is, we can extract data from arrays and objects and assign them to variables" },
    { h: "ES6 Module - 30+31", q: "#8 Is Optional Chaining is same as Ternary Operator?", a: "#8 JavaScript's Optional Chaining Operator, also known as the conditional ternary operator is one of those cool new features in ES2020 that you need to know." },
    { h: "ES6 Module - 30+31", q: "#9 What do you mean by dot notation and bracket notation? When should you use dot notation or bracket notation?", a: "#9 The dot notation is used mostly as it is easier to read and comprehend and also less verbose. The main difference between dot notation and bracket notation is that the bracket notation allows us to access object properties using variable." },


    { h: "API Module - 32", q: "#1 Difference between GET & POST.", a: "#1 GET retrieves a representation of the specified resource. POST is for writing data, to be processed to the identified resource. 2. It typically has relevant information in the URL of the request." },
    { h: "API Module - 32", q: "#2 What is an API?", a: "#2 API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. Each time you use an app like Facebook, send an instant message, or check the weather on your phone, you’re using an API." },
    { h: "API Module - 32", q: "#3 What are the HTTP Methods Supported by REST?", a: "#3 HTTP-based APIs integrate easily with RESTful web services, but they often seem illogical, overlapping and inefficient. There are many ways to use HTTP methods, plenty of which aren't compatible with RESTful principles. There's also a long-running debate over how important it is to strictly follow REST or HTTP principles when constructing APIs." },
    { h: "API Module - 32", q: "#4 Can you use GET request instead of PUT to create a resource?", a: "#4 Can I use GET request instead of PUT to create resources? You can, but the only way to pass data in a GET request is by the URL itself." },
    { h: "API Module - 32", q: "#5 What is the difference between PUT and POST?", a: "#5 The difference between POST and PUT is that PUT requests are idempotent. That is, calling the same PUT request multiple times will always produce the same result. In contrast, calling a POST request repeatedly have side effects of creating the same resource multiple times." },
    { h: "API Module - 32", q: "#6 What is JSON?", a: "#6 The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. Code for reading and generating JSON data can be written in any programming language." },
    { h: "API Module - 32", q: "#7 What are CRUD Operations?", a: "#7 CRUD (create, read, update, delete) is an acronym that refers to the four functions we use to implement persistent storage applications and relational database applications, including the Oracle Database, Microsoft SQL Server, and MySQL." },
    { h: "API Module - 32", q: "#8 What is the file extension of JSON?", a: "#8 JSON is a language-independent data format. It was derived from JavaScript, but many modern programming languages include code to generate and parse JSON-format data. JSON filenames use the extension . json ." },
    { h: "API Module - 32", q: "#9 What are the data types supported by JSON?", a: "#9 JSON supports a value of type String, Number and Boolean. It does not support octal and hexdecimal values." },
    { h: "API Module - 32", q: "#10 What is the role of JSON.stringify?", a: "#10 The JSON.stringify() method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified." },
    { h: "API Module - 32", q: "#11 Show how to parse a JSON.", a: "#11 The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned." },


    { h: "Module - 34", q: "#1 (Advanced) How to compare two objects in JavaScript.", a: "#1 This function as the name states will be used to compare 2 objects and it works for objects that contain simple, but not complex properties." },
    { h: "Module - 34", q: "#2 (Advanced) What is the difference between bind, call, apply?", a: "#2 Call invokes the function and allows you to pass in arguments one by one. Apply invokes the function and allows you to pass in arguments as an array. Bind returns a new function, allowing you to pass in a this array and any number of arguments." },
    { h: "Module - 34", q: "#3 (Advanced) How the this keyword works in JavaScript.", a: "#3 “This” keyword refers to an object that is executing the current piece of code. It references the object that is executing the current function. If the function being referenced is a regular function, “this” references the global object" },
    { h: "Module - 34", q: "#4 What is the difference between arrow function and regular function?", a: "#4 Unlike regular functions, arrow functions do not have their own this . The value of this inside an arrow function remains the same throughout the lifecycle of the function and is always bound to the value of this in the closest non-arrow parent function." },


    { h: "Module - 37", q: "#1 How does browser runs JavaScript?", a: "#1 The way JavaScript works is interesting. Inside a normal Web page you place some JavaScript code (See How Web Pages Work for details on Web pages). When the browser loads the page, the browser has a built-in interpreter that reads the JavaScript code it finds in the page and runs it." },
    { h: "Module - 37", q: "#2 How does Browser works?", a: "#2 When the web browser fetches data from an internet connected server, it uses a piece of software called a rendering engine to translate that data into text and images. This data is written in Hypertext Markup Language (HTML) and web browsers read this code to create what we see, hear and experience on the internet." },
    { h: "Module - 37", q: "#3 HTTP vs HTTPS?", a: "#3 The only difference between the two protocols is that HTTPS uses TLS (SSL) to encrypt normal HTTP requests and responses, and to digitally sign those requests and responses. As a result, HTTPS is far more secure than HTTP. A website that uses HTTP has http:// in its URL, while a website that uses HTTPS has https://." },
    { h: "Module - 37", q: "#4 Tell me something about JS engine v8 internal mechanism.", a: "#4 The JavaScript engine executes and compiles JavaScript into native machine code. Every major browser has developed its own JS engine: Google's ..." },
    { h: "Module - 37", q: "#5 What is rerender in Browser?", a: "#5 Assume I have an element with id #msg and on a certain condition I want to add to it a class in order to apply a style e.g. to make the text appear red. ...." },
    { h: "Module - 37", q: "#6 What is event loop in JavaScript", a: "#6 JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java." },
    { h: "Module - 37", q: "#7 If javascript is single threaded, how does it handle", a: "#7 Javascript is a single threaded language. This means it has one call stack and one memory heap. As expected, it executes code in order and must finish executing a piece code before moving onto the next." },
    { h: "Module - 37", q: "#8 asynchronous call?", a: "#8 An asynchronous method call is a method used in . NET programming that returns to the caller immediately before the completion of its processing and without blocking the calling thread" },
    { h: "Module - 37", q: "#9 What is SSL?", a: "#9 SSL stands for Secure Sockets Layer and, in short, it's the standard technology for keeping an internet connection secure and safeguarding any sensitive data that is being sent between two systems, preventing criminals from reading and modifying any information transferred, including potential personal details." },
    { h: "Module - 37", q: "#10 Differences between setTimeOut and SetInterval", a: "#10 setTimeout allows us to run a function once after the interval of time. setInterval allows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval." },
    { h: "Module - 37", q: "#11 What is Regular Expression?", a: "#11 a sequence of symbols and characters expressing a string or pattern to be searched for within a longer piece of text." },


    { h: "Module - 38.5", q: "#1 What is the difference between an alert and a confirm box?", a: "#1 Alert box is used if we want the information comes through to the user. Confirm box is used if we want the user to verify or accept something." },
    { h: "Module - 38.5", q: "#2 What are JavaScript Cookies?", a: "#2 A cookie is an amount of information that persists between a server-side and a client-side. A web browser stores this information at the time of browsing. A cookie contains the information as a string generally in the form of a name-value pair separated by semi-colons." },
    { h: "Module - 38.5", q: "#3 Difference between Local Storage & Session Storage.", a: "#3 sessionStorage is similar to localStorage ; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends. Whenever a document is loaded in a particular tab in the browser, a unique page session gets created and assigned to that particular tab." },
    { h: "Module - 38.5", q: "#4 What should you see? Cookies or Local Storage or Session Storage?", a: "#4 For most cases, we use the localStorage object if we want some data to be on the browser. If we want it on the server, then we use cookies, and the sessionStorage is used when we want to destroy the data whenever that specific tab gets closed or the season is closed by the user." },
    { h: "Module - 38.5", q: "#5 Write 2 difference between DOM & BOM.", a: "#5 The Document Object Model (DOM) defines a standard for accessing documents. The Browser Object Model (BOM) allows JavaScript to 'talk to' the browser. In the HTML DOM, the Element object represents an HTML element, like P, DIV, A, TABLE, or any other HTML element" },
    { h: "Module - 38.5", q: "#6 Discuss about the types of Browser API.", a: "#6 First up, we'll start by looking at APIs from a high level — what are they, how do they work, how to use them in your code, and how are they structured? We'll also take a look at what the different main classes of APIs are, and what kind of uses they have. ..." },


    { h: "Module - 39", q: "#1 Difference between Null & Undefined.", a: "#1 undefined is a variable that refers to something that doesn't exist, and the variable isn't defined to be anything. null is a variable that is defined but is missing a value." },
    { h: "Module - 39", q: "#2 Difference between ==  & === .", a: "#2 The main difference between the == and === operator in javascript is that the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values as well as the data types of the operands." },
    { h: "Module - 39", q: "#3 Difference between Global Scope & Block Scope.", a: "#3 In a browser environment, the global scope is controlled by the window object while in Node. js, it's controlled by the global object. Block scopes are what you get when you use if statements, for statements, and the like. ..." },
    { h: "Module - 39", q: "#4 What is Closure.", a: "#4 an act or process of closing something, especially an institution, thoroughfare, or frontier, or of being closed. 'hospitals that face closure' ..." },
    { h: "Module - 39", q: "#5 What data types are variables in javascript?", a: "#5 In Javascript, there are five basic, or primitive, types of data. The five most basic types of data are strings, numbers, booleans, undefined, and null. We refer to these as primitive data types. A single variable can only store a single type of data." },
    { h: "Module - 39", q: "#6 What type of thing is a javascript function, or array?", a: "#6 In Javascript, there are only 6 data types defined – the primitives (boolean, number, string, null, undefined) and object (the only reference type). Arrays do not belong to this list because they are objects as well." },
    { h: "Module - 39", q: "#7 If an array is an object in javascript, how to check whether a variable is an array or not?", a: "#7 isArray() method is used to check if an object is an array. The Array. isArray() method returns true if an object is an array, otherwise returns false ." },
    { h: "Module - 39", q: "#8 Or when does implicit conversion happen?", a: "#8 Implicit type conversion in C happens automatically when a value is copied to its compatible data type. During conversion, strict rules for type conversion are applied. If the operands are of two different data types, then an operand having lower data type is automatically converted into a higher data type." },
    { h: "Module - 39", q: "#9 There are several types of scopes in JavaScript. What is the difference between these scopes? When does it happen?", a: "#9 1. The scope. 2. Block scope. 2.1 var is not block scoped. 3. Function scope. 4. Module scope. 5. Scopes can be nested. 6. Global scope.  7. Lexical scope. 8. Variables isolation. 9. Conclusion" },
    { h: "Module - 39", q: "#10 What is block scope? What types of scopes do let, const create?", a: "#10 Function Scope: When a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function. Block Scope: A variable when declared inside the if or switch conditions or inside for or while loops, are accessible within that particular condition or loop.Function Scope: When a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function. Block Scope: A variable when declared inside the if or switch conditions or inside for or while loops, are accessible within that particular condition or loop." },
    { h: "Module - 39", q: "#11 (Advanced) What is Closure? How does this work?", a: "#11 A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function." },
    { h: "Module - 39", q: "#12 What is a callback function?", a: "#12 A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. ..." },
    { h: "Module - 39", q: "#13 (Advanced) What is hoisting and how does it work?? (Learn more by searching on Google)", a: "#13 Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Inevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local." },
    { h: "Module - 39", q: "#14 (Advanced) What types of variables are passed to functions by reference and what types of variables are passed as values.", a: "#14 The term parameter (sometimes called formal parameter) is often used to refer to the variable as found in the function definition, while argument (sometimes called actual parameter) refers to the actual input supplied at function call. ..." },
    { h: "Module - 39", q: "#15 Tell the difference Between Primitive and Non-Primitive Data Types in JavaScript.", a: "#15 The Primitive Data types in JavaScript include Number, String, Boolean, Undefined, Null and Symbol. The Non-Primitive data type has only one member i.e. the Object." },
    { h: "Module - 39", q: "#16 What are the Truthy and Falsy values? Give me some examples.", a: "#16 Truthy values are values that evaluate to True in a boolean context. Falsy values are values that evaluate to False in a boolean context. ...." },
    { h: "Module - 39", q: "#17 What is scope in JavaScript?", a: "#17 Scope in JavaScript refers to the current context of code, which determines the accessibility of variables to JavaScript. The two types of scope are local and global: Global variables are those declared outside of a block. Local variables are those declared inside of a block." },


    { h: "Module - 40.5", q: "#1 What is call stack?", a: "#1 A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple functions — what function is currently being run and what functions are called from within that function, etc. ..." },
    { h: "Module - 40.5", q: "#2 Tell us about Try-Catch.", a: "#2 The try statement allows you to define a block of code to be tested for errors while it is being executed. The catch statement allows you to define a block of code to be executed, if an error occurs in the try block. ..." },
    { h: "Module - 40.5", q: "#3 Name some Console APIs.", a: "#3 The console object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided. ..." },
    { h: "Module - 40.5", q: "#4 What is Syntax Error?", a: "#4 Syntax errors are mistakes in the source code, such as spelling and punctuation errors, incorrect labels, and so on, which cause an error message to be generated by the compiler. These appear in a separate error window, with the error type and line number indicated so that it can be corrected in the edit window." },
    { h: "Module - 40.5", q: "#5 When do we get Reference Error?", a: "#5 The ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced." },


    { h: "A", q: "#1 ", a: "#1 " },
    { h: "A", q: "#2 ", a: "#2 " },
    { h: "A", q: "#3 ", a: "#3 " },
    { h: "A", q: "#4 ", a: "#4 " },
    { h: "A", q: "#5 ", a: "#5 " },
    { h: "A", q: "#6 ", a: "#6 " },
    { h: "A", q: "#7 ", a: "#7 " },
    { h: "A", q: "#8 ", a: "#8 " },
    { h: "A", q: "#9 ", a: "#9 " },
    { h: "A", q: "#10 ", a: "#10 " },
    { h: "A", q: "#11 ", a: "#11 " },

]


const dataBan = [
    { h: "A", q: "#1 ", a: "#1 " },
    { h: "A", q: "#2 ", a: "#2 " },
    { h: "A", q: "#3 ", a: "#3 " },
    { h: "A", q: "#4 ", a: "#4 " },
    { h: "A", q: "#5 ", a: "#5 " },
    { h: "A", q: "#6 ", a: "#6 " },
    { h: "A", q: "#7 ", a: "#7 " },
    { h: "A", q: "#8 ", a: "#8 " },
    { h: "A", q: "#9 ", a: "#9 " },
    { h: "A", q: "#10 ", a: "#10 " },
    { h: "A", q: "#11 ", a: "#11 " },

]
